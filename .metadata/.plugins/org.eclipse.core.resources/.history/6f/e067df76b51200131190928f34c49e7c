<?xml version="1.0" encoding="UTF-8"?>
<pattern>
	<definition>
		Provides one level of interface higher than the factory
		pattern. It is used to
		return one of several factories.
	</definition>

	<use_benefits>
		<ub>Creates families of related or dependent objects like Kit.</ub>
		<ub>Provides a class library of products, exposing interface not
			implementation.</ub>
		<ub>Needs to isolate concrete classes from their super classes.</ub>
		<ub>A system needs independent of how its products are created,
			composed,
			and represented.
		</ub>
		<ub>Try to enforce a constraint.</ub>
		<ub>An alternative to Facade to hide platform-specific classes</ub>
		<ub>Easily extensible to a system or a family</ub>
		<related>
			<rel>Factory method, which is often implemented with an abstract factory.</rel>
			<rel>Singleton, which is often implemented with an abstract factory.</rel>
			<rel>Prototype, which is often implemented with an abstract factory.</rel>
			<rel>fa√ßade, which is often used with an abstract factory by providing an interface for creating implementing class.</rel>
		</related>
	</use_benefits>

	<example>
		Suppose you need to write a program to show data in two
		different
		places. Let's say from a local or a remote database. You need
		to make a
		connection to a database before working on the data. In this
		case, you
		have two choices, local or remote. You may use abstract
		factory design
		pattern to design the interface in the following way:
	</example>

</pattern>